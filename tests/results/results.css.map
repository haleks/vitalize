{"version":3,"sources":["tests.css","../node_modules/sass-true/sass/true/_messages.scss","../scss/core/_global.scss","core/_mixins.scss","../node_modules/sass-true/sass/true/_assert.scss"],"names":[],"mappings":"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","file":"results.css","sourcesContent":["@charset \"UTF-8\";\n/* # Module: map-deep-get */\n/* ---------------------- */\n/* Test: should return the value of the requested key from a deep nested map */\n/*   ✔ Return the value from a deep nested map. */\n/*  */\n/*  */\n/* # Module: map-deep-set */\n/* ---------------------- */\n/* Test: should set the value of the requested key from a deep nested map */\n/*   ✔ Set a value to deep nested map. */\n/*  */\n/*  */\n/* # Module: map-has-keys */\n/* ---------------------- */\n/* Test: should return true if the requested keys from a map exists */\n/*   ✔ Return true if a deep key exists. */\n/*  */\n/* Test: should return false if the requested keys from a map doesn't exists */\n/*   ✔ Return true if a deep key exists. */\n/*  */\n/*  */\n/* # Module: map-has-nested-keys */\n/* ----------------------------- */\n/* Test: should return true if the requested keys from a deeply nested map exists */\n/*   ✔ Return true if map got all '$keys' nested with each others. */\n/*  */\n/* Test: should return false if the requested keys from a deeply nested map doesn't exists */\n/*   ✔ Return true if map got all '$keys' nested with each others. */\n/*  */\n/*  */\n/* # Module: map-depth */\n/* ------------------- */\n/* Test: should return the depth level of athe deeply nested map */\n/*   ✔ Return the level of depth the map has. */\n/*  */\n/*  */\n/* # Module: map-extend */\n/* -------------------- */\n/* Test: should return a merged map of 2 or more maps */\n/*   ✔ Return a merged map of 2 or more maps */\n/*  */\n/* Test: should return a merged map of 2 or more deeply nested maps */\n/*   ✔ Return a merged map of 2 or more maps */\n/*  */\n/*  */\n/* # Module: map-zip */\n/* ----------------- */\n/* Test: should return a merged map from a list of keys and a list of values */\n/*   ✔ Return a map with merged lists of keys and values. */\n/*  */\n/*  */\n/* # Module: map-combine */\n/* --------------------- */\n/* Test: should return a merged map from a list of keys and a list of values */\n/*   ✔ Return a map with combined lists of keys and values. */\n/*  */\n/*  */\n/* # Module: str-replace */\n/* --------------------- */\n/* Test: should return a string with replaced substring */\n/*   ✔ Return a string with replaced characters. */\n/*  */\n/*  */\n/* # Module: str-escape */\n/* -------------------- */\n/* Test: should return a escaped string */\n/*   ✔ Return a string with escaped characters. */\n/*  */\n/*  */\n/* # Module: str-escape */\n/* -------------------- */\n/* Test: should return a escaped string */\n/*   ✔ Return a string with escaped characters. */\n/*  */\n/*  */\n/* # Module: keyframe */\n/* ------------------ */\n/* Test: should output prefixed keyframes with requested name */\n/*   ASSERT: Outputs prefixed keyframes.   */\n/*   OUTPUT   */\n@-webkit-keyframes name {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@keyframes name {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n/*   END_OUTPUT   */\n/*   EXPECTED   */\n@-webkit-keyframes name {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@keyframes name {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n/*   END_EXPECTED   */\n/*   END_ASSERT   */\n/*  */\n/*  */\n/* # Module: animation-set */\n/* ----------------------- */\n/* Test: should output animation keyframes with default properties and extensions */\n/*   ASSERT: Outputs animation with keyframes, properties and extensions.   */\n/*   OUTPUT   */\n.test-output {\n  -webkit-animation-name: \"vitalize\";\n  animation-name: \"vitalize\";\n  -webkit-animation-iteration-count: 1;\n  animation-iteration-count: 1;\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-delay: 0s;\n  animation-delay: 0s;\n  -webkit-animation-function: ease;\n  animation-function: ease;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation-visibility: hidden;\n  animation-visibility: hidden; }\n\n@-webkit-keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n/*   END_OUTPUT   */\n/*   EXPECTED   */\n.test-output {\n  -webkit-animation-name: \"vitalize\";\n  animation-name: \"vitalize\";\n  -webkit-animation-iteration-count: 1;\n  animation-iteration-count: 1;\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-delay: 0s;\n  animation-delay: 0s;\n  -webkit-animation-function: ease;\n  animation-function: ease;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation-visibility: hidden;\n  animation-visibility: hidden; }\n\n@-webkit-keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n/*   END_EXPECTED   */\n/*   END_ASSERT   */\n/*  */\n/* Test: should output animation keyframes with custom properties and extensions */\n/*   ASSERT: Outputs animation with keyframes, properties and extensions.   */\n/*   OUTPUT   */\n.test-output {\n  -webkit-animation-name: \"vitalize\";\n  animation-name: \"vitalize\";\n  -webkit-animation-iteration-count: 1;\n  animation-iteration-count: 1;\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-delay: 1s;\n  animation-delay: 1s;\n  -webkit-animation-function: ease;\n  animation-function: ease;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation-visibility: hidden;\n  animation-visibility: hidden; }\n\n@-webkit-keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n/*   END_OUTPUT   */\n/*   EXPECTED   */\n.test-output {\n  -webkit-animation-name: \"vitalize\";\n  animation-name: \"vitalize\";\n  -webkit-animation-iteration-count: 1;\n  animation-iteration-count: 1;\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-delay: 1s;\n  animation-delay: 1s;\n  -webkit-animation-function: ease;\n  animation-function: ease;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation-visibility: hidden;\n  animation-visibility: hidden; }\n\n@-webkit-keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n@keyframes vitalize {\n  from {\n    color: red; }\n  to {\n    color: blue; } }\n\n/*   END_EXPECTED   */\n/*   END_ASSERT   */\n/*  */\n/*  */\n/* # Module: animation-name-set */\n/* ---------------------------- */\n/* Test: should output prefixed animation name property */\n/*   ASSERT: Outputs prefixed animation name property.   */\n/*   OUTPUT   */\n.test-output {\n  -webkit-animation-name: \"vitalize\";\n  animation-name: \"vitalize\"; }\n\n/*   END_OUTPUT   */\n/*   EXPECTED   */\n.test-output {\n  -webkit-animation-name: \"vitalize\";\n  animation-name: \"vitalize\"; }\n\n/*   END_EXPECTED   */\n/*   END_ASSERT   */\n/*  */\n/*  */\n/* # Module: animation-properties-set */\n/* ---------------------------------- */\n/* Test: should output prefixed animation properties */\n/*   ASSERT: Outputs prefixed animation property.   */\n/*   OUTPUT   */\n.test-output {\n  -webkit-animation-iteration-count: 2;\n  animation-iteration-count: 2;\n  -webkit-animation-delay: 250ms;\n  animation-delay: 250ms; }\n\n/*   END_OUTPUT   */\n/*   EXPECTED   */\n.test-output {\n  -webkit-animation-iteration-count: 2;\n  animation-iteration-count: 2;\n  -webkit-animation-delay: 250ms;\n  animation-delay: 250ms; }\n\n/*   END_EXPECTED   */\n/*   END_ASSERT   */\n/*  */\n/*  */\n/* # Module: animation-property-set */\n/* -------------------------------- */\n/* Test: should output prefixed animation property */\n/*   ASSERT: Outputs prefixed animation property.   */\n/*   OUTPUT   */\n.test-output {\n  -webkit-animation-delay: 250ms;\n  animation-delay: 250ms; }\n\n/*   END_OUTPUT   */\n/*   EXPECTED   */\n.test-output {\n  -webkit-animation-delay: 250ms;\n  animation-delay: 250ms; }\n\n/*   END_EXPECTED   */\n/*   END_ASSERT   */\n/*  */\n/*  */\n/* # SUMMARY ---------- */\n/* 20 Tests: */\n/*  - 14 Passed */\n/*  - 0 Failed */\n/*  - 6 Output to CSS */\n/* -------------------- */\n","// Messages\n// ========\n\n/// New line helper\n/// @access private\n/// @group x_private\n/// @type String\n$-tnl: '\\a ';\n\n\n/// Output a message to CSS comments, or command line terminal (via debug/warn)\n/// @access private\n/// @group x_private\n/// @param {String} $message - Message to output\n/// @param {String} $output [comments] - Type of output, either `comments`, `terminal`, `debug` or `warn`\n/// @require {function} _true-str-split\n@mixin _true-message(\n  $message,\n  $output: 'comments'\n) {\n  $lines: _true-str-split($message, $-tnl);\n  @if index($output, 'comments') {\n    @each $line in $lines {\n      /* #{$line} */\n    }\n  } @else if index($output, 'debug') or index($output, 'terminal') {\n    @each $line in $lines  {\n      @debug $line;\n    }\n  } @else if index($output, 'warn') {\n    @each $line in $lines {\n      @warn $line;\n    }\n  }\n}\n","// Haleks — Vitalize\n// https://haleks.ca\n// Licensed under MIT Open Source\n\n\n// Global\n// ======\n@import 'functions';\n\n\n// Variables\n// ---------\n\n// Generate the animations classes.\n$vitalize-include-class: true !default;\n\n// Vitalize global default map.\n// This map is used to merge missing map keys and values of each the\n// of the properties variables set in the settings.\n$vitalize-global-properties: (\n  'count': 1,\n  'duration': 1s,\n  'delay': 0s,\n  'function': 'ease',\n  'fill-mode': 'both',\n  'visibility': 'hidden'\n) !global;\n\n// Set default for all animations and make sure all properties are merged.\n$vitalize-default-properties: $vitalize-global-properties !default;\n$vitalize-default-properties: map-merge($vitalize-global-properties, $vitalize-default-properties);\n\n// Set default extensions for all animations.\n$vitalize-default-extensions: () !default;\n\n\n// Mixins\n// ======\n\n// Keyframes\n// ---------\n// - Outputs prefixed keyframes.\n// - @param string $name\n@mixin keyframes($name) {\n  $name: str-escape($name);\n\n  @-webkit-keyframes #{$name} {\n    @content;\n  }\n\n  @keyframes #{$name} {\n    @content;\n  }\n}\n\n\n// Animation\n// =========\n\n// Set Animation\n// -------------\n// - Outputs animation with keyframes, properties and extensions.\n// - @param string $name\n// - @param map $options\n@mixin animation-set($name, $options: ()) {\n  $options: map-extend(('properties': $vitalize-default-properties, 'extensions': $vitalize-default-extensions), $options, true);\n\n  @include keyframes($name) {\n    @content;\n  }\n\n  @include animation-name-set($name);\n  @include animation-properties-set(map-get($options, 'properties'));\n  @include animation-extensions-set(map-get($options, 'extensions'));\n}\n\n// Set animation name\n// ------------------\n// - Outputs prefixed animation name property.\n// - @param string $name\n@mixin animation-name-set($name) {\n  -webkit-animation-name: $name;\n  animation-name: $name;\n}\n\n// Set animation properties\n// ------------------------\n// - Outputs all prefixed animation properties.\n// - @param map $properties\n@mixin animation-properties-set($properties) {\n  @each $name, $value in $properties {\n    @include animation-property-set($name, $value)\n  }\n}\n// Set animation extensions\n// ------------------------\n// - Outputs all extensions.\n// - @param map $extensions\n@mixin animation-extensions-set($extensions) {\n  @each $name, $values in $extensions {\n    @include animation-extension-set($name, $values);\n  }\n}\n\n// Set animation extension\n// -----------------------\n// - Outputs requested extension.\n// - @param string $name\n// - @param string|number $value\n@mixin animation-extension-set($name, $values) {\n  @each $classname, $value in $values {\n    $classname: str-escape($classname);\n\n    &.#{$name}-#{$classname} {\n      @include animation-property-set($name, $value);\n    }\n  }\n}\n\n// Set animation property\n// ----------------------\n// - Outputs requested prefixed animation property.\n// - @param string $name\n// - @param string|number $value\n@mixin animation-property-set($name, $value) {\n  @if ($name == 'count') {\n    $name: 'iteration-count';\n  }\n\n  @if type-of($value) == string {\n    $value: unquote($value);\n  }\n\n  -webkit-animation-#{$name}: $value;\n  animation-#{$name}: $value;\n}\n","// Haleks — Vitalize\n// https://haleks.ca\n// Licensed under MIT Open Source\n\n\n// Mixins\n// ======\n\n// Keyframe\n// --------\n\n@include test-module('keyframe') {\n  @include test('should output prefixed keyframes with requested name') {\n    @include assert('Outputs prefixed keyframes.') {\n      @include output {\n        @include keyframes('name') {\n          from {\n            color: red;\n          }\n\n          to {\n            color: blue;\n          }\n        };\n      }\n\n      @include expect {\n        @-webkit-keyframes name {\n          from {\n            color: red;\n          }\n\n          to {\n            color: blue;\n          }\n        }\n\n        @keyframes name {\n          from {\n            color: red;\n          }\n\n          to {\n            color: blue;\n          }\n        }\n      }\n    }\n  }\n}\n\n// Animation\n// ---------\n\n@include test-module('animation-set') {\n  @include test('should output animation keyframes with default properties and extensions') {\n    @include assert('Outputs animation with keyframes, properties and extensions.') {\n      @include output {\n        @include animation-set('vitalize') {\n          from {\n            color: red;\n          }\n\n          to {\n            color: blue;\n          }\n        }\n      }\n\n      @include expect {\n        -webkit-animation-name: \"vitalize\";\n        animation-name: \"vitalize\";\n        -webkit-animation-iteration-count: 1;\n        animation-iteration-count: 1;\n        -webkit-animation-duration: 1s;\n        animation-duration: 1s;\n        -webkit-animation-delay: 0s;\n        animation-delay: 0s;\n        -webkit-animation-function: ease;\n        animation-function: ease;\n        -webkit-animation-fill-mode: both;\n        animation-fill-mode: both;\n        -webkit-animation-visibility: hidden;\n        animation-visibility: hidden;\n\n        @-webkit-keyframes vitalize {\n          from {\n            color: red;\n          }\n\n          to {\n            color: blue;\n          }\n        }\n\n        @keyframes vitalize {\n          from {\n            color: red;\n          }\n\n          to {\n            color: blue;\n          }\n        }\n      }\n    }\n  }\n\n  @include test('should output animation keyframes with custom properties and extensions') {\n    @include assert('Outputs animation with keyframes, properties and extensions.') {\n      @include output {\n        $options: (\n          'properties': (\n            'delay': 1s,\n          )\n        );\n\n        @include animation-set('vitalize', $options) {\n          from {\n            color: red;\n          }\n\n          to {\n            color: blue;\n          }\n        }\n      }\n\n      @include expect {\n        -webkit-animation-name: \"vitalize\";\n        animation-name: \"vitalize\";\n        -webkit-animation-iteration-count: 1;\n        animation-iteration-count: 1;\n        -webkit-animation-duration: 1s;\n        animation-duration: 1s;\n        -webkit-animation-delay: 1s;\n        animation-delay: 1s;\n        -webkit-animation-function: ease;\n        animation-function: ease;\n        -webkit-animation-fill-mode: both;\n        animation-fill-mode: both;\n        -webkit-animation-visibility: hidden;\n        animation-visibility: hidden;\n\n        @-webkit-keyframes vitalize {\n          from {\n            color: red;\n          }\n\n          to {\n            color: blue;\n          }\n        }\n\n        @keyframes vitalize {\n          from {\n            color: red;\n          }\n\n          to {\n            color: blue;\n          }\n        }\n      }\n    }\n  }\n}\n\n@include test-module('animation-name-set') {\n  @include test('should output prefixed animation name property') {\n    @include assert('Outputs prefixed animation name property.') {\n      @include output {\n        @include animation-name-set('vitalize');\n      }\n\n      @include expect {\n        -webkit-animation-name: \"vitalize\";\n        animation-name: \"vitalize\";\n      }\n    }\n  }\n}\n\n@include test-module('animation-properties-set') {\n  @include test('should output prefixed animation properties') {\n    @include assert('Outputs prefixed animation property.') {\n      @include output {\n        $properties: (\n          'count': 2,\n          'delay': 250ms,\n        );\n\n        @include animation-properties-set($properties);\n      }\n\n      @include expect {\n        -webkit-animation-iteration-count: 2;\n        animation-iteration-count: 2;\n        -webkit-animation-delay: 250ms;\n        animation-delay: 250ms;\n      }\n    }\n  }\n}\n\n@include test-module('animation-property-set') {\n  @include test('should output prefixed animation property') {\n    @include assert('Outputs prefixed animation property.') {\n      @include output {\n        @include animation-property-set('delay', 250ms);\n      }\n\n      @include expect {\n        -webkit-animation-delay: 250ms;\n        animation-delay: 250ms;\n      }\n    }\n  }\n}\n","// Assert\n// ======\n\n\n/// Assert that a parameter is `true`\n/// @access public\n/// @group testing\n/// @param {*} $assert - Assert\n/// @param {String} $description [''] - Assert description\n/// @require {mixin} _true-fail-details\n/// @require {mixin} _true-assert-start\n/// @require {mixin} _true-assert-stop\n@mixin assert-true(\n  $assert,\n  $description: ''\n) {\n  $default: '\"#{inspect($assert)}\" should be truthy';\n\n  @include _true-context('assert', $description or $default);\n  @include _true-assert-results('assert-true', not not $assert, true);\n}\n\n/// Assert that a parameter is `false`\n/// @access public\n/// @group testing\n/// @param {*} $assert - Assert\n/// @param {String} $description [''] - Assert description\n/// @require {mixin} _true-fail-details\n/// @require {mixin} _true-assert-start\n/// @require {mixin} _true-assert-stop\n@mixin assert-false(\n  $assert,\n  $description: ''\n) {\n  $default: '\"#{inspect($assert)}\" should be falsey';\n\n  @include _true-context('assert', $description or $default);\n  @include _true-assert-results('assert-false', $assert, false);\n}\n\n/// /// Assert that two parameters are `equal`\n/// @access public\n/// @group testing\n/// @param {*} $assert - Assert\n/// @param {*} $expected - Expected result\n/// @param {String} $description [''] - Assert description\n/// @require {mixin} _true-fail-details\n/// @require {mixin} _true-assert-start\n/// @require {mixin} _true-assert-stop\n@mixin assert-equal(\n  $assert,\n  $expected,\n  $description: ''\n) {\n  $default: '\"#{inspect($assert)}\" and \"#{inspect($expected)}\" should be equal';\n\n  @include _true-context('assert', $description or $default);\n  @include _true-assert-results('assert-equal', $assert, $expected);\n}\n\n/// Assert that two parameters are `unequal`\n/// @access public\n/// @group testing\n/// @param {*} $assert - Assert\n/// @param {*} $expected - Expected result\n/// @param {String} $description [''] - Assert description\n/// @require {mixin} _true-fail-details\n/// @require {mixin} _true-assert-start\n/// @require {mixin} _true-assert-stop\n@mixin assert-unequal(\n  $assert,\n  $expected,\n  $description: ''\n) {\n  $default: '\"#{inspect($assert)}\" and \"#{inspect($expected)}\" should not be equal';\n\n  @include _true-context('assert', $description or $default);\n  @include _true-assert-results('assert-unequal', $assert, $expected, 'unequal');\n}\n\n\n// CSS Output Tests\n// ----------------\n\n/// Define a CSS-output assertion\n/// @access public\n/// @group testing\n/// @param {String} $description - Assert description\n/// @content Use `output()` and `expect()` mixins to define blocks for comparison\n/// @require {mixin} _true-assert-start\n/// @require {mixin} _true-assert-stop\n/// @require {function} _true-selector\n@mixin assert(\n  $description: ''\n) {\n  $default: _true-context('test') or 'CSS output should match expected output';\n\n  @include _true-context('assert', $description);\n  @include _true-message('  ASSERT: #{$description}  ', 'comments');\n\n  @content;\n\n  @include _true-update('output-to-css');\n  @include _true-context-pop();\n  @include _true-message('  END_ASSERT  ', 'comments');\n}\n\n\n/// Describe the test content to be evaluated\n/// The output will be compared against the results of the `expect()` mixin.\n/// @access public\n/// @group testing\n@mixin output(\n  $selector: true\n) {\n  @include _true-message('  OUTPUT  ', 'comments');\n\n  @if $selector {\n    .test-output {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n\n  @include _true-message('  END_OUTPUT  ', 'comments');\n}\n\n\n/// @alias output\n@mixin input(\n  $selector: true\n) {\n  @warn 'The `input` mixin has been renamed `output` and will be removed.';\n\n  @include output($selector) {\n    @content;\n  }\n}\n\n\n/// Describe the output content to be expected.\n/// The output will be compared against the results of the `output()` mixin.\n/// @access public\n/// @group testing\n@mixin expect(\n  $selector: true\n) {\n  @include _true-message('  EXPECTED  ', 'comments');\n\n  @if $selector {\n    .test-output {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n\n  @include _true-message('  END_EXPECTED  ', 'comments');\n}\n\n\n// Assert Results\n// --------------\n\n@mixin _true-assert-results(\n  $type,\n  $assert,\n  $expected,\n  $unequal: false,\n  $terminal: $true-terminal-output\n) {\n  $assertion: _true-context('assert');\n  $equal: _true-is-equal($assert, $expected);\n  $pass: if($unequal, not $equal, $equal);\n  $result: if($pass, 'pass', 'fail');\n\n  @if $result == 'pass' {\n    @include _true-message('  ✔ #{$assertion}', 'comments');\n  } @else {\n    $module: _true-context('module');\n    $test: _true-context('test');\n\n    $title: 'FAILED [#{$type}]: #{$assertion}';\n    $out: 'Output [#{type-of($assert)}]: #{inspect($assert)}';\n    $exp: 'Expected [#{type-of($expected)}]: #{inspect($expected)}';\n\n    @include _true-message('  ✖ #{$title}', 'comments');\n    @include _true-message('    - #{$out}', 'comments');\n    @include _true-message('    - #{$exp}', 'comments');\n\n    @if $terminal {\n      @include _true-message('#{$module} » #{$test}', 'debug');\n      @include _true-message('- #{$out}', 'debug');\n      @include _true-message('- #{$exp}', 'debug');\n      @include _true-message($title, 'warn');\n    }\n  }\n\n  @include _true-update($result);\n  @include _true-context-pop();\n}\n"],"sourceRoot":"/source/"}