/* # map-deep-get ---------- */
/* should return the value of the requested key from a deep nested map */
[data-module="map-deep-get"] [data-test="should return the value of the requested key from a deep nested map"] .assert-equal {
  -result: PASS;
  -description: "Return the value from a deep nested map."; }

/* # map-deep-set ---------- */
/* should set the value of the requested key from a deep nested map */
[data-module="map-deep-set"] [data-test="should set the value of the requested key from a deep nested map"] .assert-equal {
  -result: PASS;
  -description: "Set a value to deep nested map."; }

/* # map-has-keys ---------- */
/* should return true if the requested keys from a map exists */
[data-module="map-has-keys"] [data-test="should return true if the requested keys from a map exists"] .assert-equal {
  -result: PASS;
  -description: "Return true if a deep key exists."; }

/* should return false if the requested keys from a map doesn't exists */
[data-module="map-has-keys"] [data-test="should return false if the requested keys from a map doesn't exists"] .assert-equal {
  -result: PASS;
  -description: "Return true if a deep key exists."; }

/* # map-has-nested-keys ---------- */
/* should return true if the requested keys from a deeply nested map exists */
[data-module="map-has-nested-keys"] [data-test="should return true if the requested keys from a deeply nested map exists"] .assert-equal {
  -result: PASS;
  -description: "Return true if map got all '$keys' nested with each others."; }

/* should return false if the requested keys from a deeply nested map doesn't exists */
[data-module="map-has-nested-keys"] [data-test="should return false if the requested keys from a deeply nested map doesn't exists"] .assert-equal {
  -result: PASS;
  -description: "Return true if map got all '$keys' nested with each others."; }

/* # map-depth ---------- */
/* should return the depth level of a deeply nested map */
[data-module="map-depth"] [data-test="should return the depth level of athe deeply nested map"] .assert-equal {
  -result: PASS;
  -description: "Return the level of depth the map has."; }

/* # map-extend ---------- */
/* should return a merged map of 2 or more maps */
[data-module="map-extend"] [data-test="should return a merged map of 2 or more maps"] .assert-equal {
  -result: PASS;
  -description: "Return a merged map of 2 or more maps"; }

/* should return a merged map of 2 or more deeply nested maps */
[data-module="map-extend"] [data-test="should return a merged map of 2 or more deeply nested maps"] .assert-equal {
  -result: PASS;
  -description: "Return a merged map of 2 or more maps"; }

/* # map-zip ---------- */
/* should return a merged map from a list of keys and a list of values */
[data-module="map-zip"] [data-test="should return a merged map from a list of keys and a list of values"] .assert-equal {
  -result: PASS;
  -description: "Return a map with merged lists of keys and values."; }

/* # map-combine ---------- */
/* should return a merged map from a list of keys and a list of values */
[data-module="map-combine"] [data-test="should return a merged map from a list of keys and a list of values"] .assert-equal {
  -result: PASS;
  -description: "Return a map with combined lists of keys and values."; }

/* # str-replace ---------- */
/* should return a string with replaced substring */
[data-module="str-replace"] [data-test="should return a string with replaced substring"] .assert-equal {
  -result: PASS;
  -description: "Return a string with replaced characters."; }

/* # str-escape ---------- */
/* should return a escaped string */
[data-module="str-escape"] [data-test="should return a escaped string"] .assert-equal {
  -result: PASS;
  -description: "Return a string with escaped characters."; }

/* # str-escape ---------- */
/* should return a escaped string */
[data-module="str-escape"] [data-test="should return a escaped string"] .assert-equal {
  -result: PASS;
  -description: "Return a string with escaped characters."; }

/* # keyframe ---------- */
/* should output prefixed keyframes with requested name */

@keyframes name {
  from {
    color: red; }
  to {
    color: blue; } }

@keyframes name {
  from {
    color: red; }
  to {
    color: blue; } }

/* # animation-set ---------- */
/* should output animation keyframes with default properties and extensions */
[data-module="animation-set"] [data-test="should output animation keyframes with default properties and extensions"] [data-assert="Outputs animation with keyframes, properties and extensions."] .input {
  animation-name: "vitalize";
  -webkit-animation-name: "vitalize";
  animation-iteration-count: 1;
  -webkit-animation-iteration-count: 1;
  animation-duration: 1s;
  -webkit-animation-duration: 1s;
  animation-delay: 0s;
  -webkit-animation-delay: 0s;
  animation-function: ease;
  -webkit-animation-function: ease;
  animation-fill-mode: both;
  -webkit-animation-fill-mode: both;
  animation-visibility: hidden;
  -webkit-animation-visibility: hidden; }

@keyframes vitalize {
  from {
    color: red; }
  to {
    color: blue; } }

[data-module="animation-set"] [data-test="should output animation keyframes with default properties and extensions"] [data-assert="Outputs animation with keyframes, properties and extensions."] .expect .vitalize {
  animation-name: "vitalize";
  animation-iteration-count: 1;
  animation-duration: 1s;
  animation-delay: 0s;
  -webkit-animation-function: ease;
  animation-function: ease;
  animation-fill-mode: both;
  -webkit-animation-visibility: hidden;
  animation-visibility: hidden; }

@keyframes vitalize {
  from {
    color: red; }
  to {
    color: blue; } }

/* should output animation keyframes with custom properties and extensions */
[data-module="animation-set"] [data-test="should output animation keyframes with custom properties and extensions"] [data-assert="Outputs animation with keyframes, properties and extensions."] .input {
  animation-name: "vitalize";
  -webkit-animation-name: "vitalize";
  animation-iteration-count: 1;
  -webkit-animation-iteration-count: 1;
  animation-duration: 1s;
  -webkit-animation-duration: 1s;
  animation-delay: 1s;
  -webkit-animation-delay: 1s;
  animation-function: ease;
  -webkit-animation-function: ease;
  animation-fill-mode: both;
  -webkit-animation-fill-mode: both;
  animation-visibility: hidden;
  -webkit-animation-visibility: hidden; }

@keyframes vitalize {
  from {
    color: red; }
  to {
    color: blue; } }

[data-module="animation-set"] [data-test="should output animation keyframes with custom properties and extensions"] [data-assert="Outputs animation with keyframes, properties and extensions."] .expect .vitalize {
  animation-name: "vitalize";
  animation-iteration-count: 1;
  animation-duration: 1s;
  animation-delay: 1s;
  -webkit-animation-function: ease;
  animation-function: ease;
  animation-fill-mode: both;
  -webkit-animation-visibility: hidden;
  animation-visibility: hidden; }

@keyframes vitalize {
  from {
    color: red; }
  to {
    color: blue; } }

/* # animation-name-set ---------- */
/* should output prefixed animation name property */
[data-module="animation-name-set"] [data-test="should output prefixed animation name property"] [data-assert="Outputs prefixed animation name property."] .input {
  animation-name: "vitalize";
  -webkit-animation-name: "vitalize"; }

[data-module="animation-name-set"] [data-test="should output prefixed animation name property"] [data-assert="Outputs prefixed animation name property."] .expect {
  animation-name: "vitalize"; }

/* # animation-properties-set ---------- */
/* should output prefixed animation properties */
[data-module="animation-properties-set"] [data-test="should output prefixed animation properties"] [data-assert="Outputs prefixed animation property."] .input {
  animation-iteration-count: 2;
  -webkit-animation-iteration-count: 2;
  animation-delay: 250ms;
  -webkit-animation-delay: 250ms; }

[data-module="animation-properties-set"] [data-test="should output prefixed animation properties"] [data-assert="Outputs prefixed animation property."] .expect {
  animation-iteration-count: 2;
  animation-delay: 250ms; }

/* # animation-property-set ---------- */
/* should output prefixed animation property */
[data-module="animation-property-set"] [data-test="should output prefixed animation property"] [data-assert="Outputs prefixed animation property."] .input {
  animation-delay: 250ms;
  -webkit-animation-delay: 250ms; }

[data-module="animation-property-set"] [data-test="should output prefixed animation property"] [data-assert="Outputs prefixed animation property."] .expect {
  animation-delay: 250ms; }

/* # SUMMARY ---------- */
/* 20 Tests: */
/*  - 14 Passed */
/*  - 0 Failed */
/*  - 6 Output to CSS */
/* -------------------- */

/*# sourceMappingURL=results.css.map */
